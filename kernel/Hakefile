--------------------------------------------------------------------------
-- Copyright (c) 2007-2013, ETH Zurich.
-- All rights reserved.
--
-- This file is distributed under the terms in the attached LICENSE file.
-- If you do not find this file, copies can be found by writing to:
-- ETH Zurich D-INFK, CAB F.78, Universitaetstr. 6, CH-8092 Zurich. 
-- Attn: Systems Group.
--
-- Hakefile for Barrelfish CPU drivers
-- 
--------------------------------------------------------------------------

--
-- Missing from this new Hakefile is the rule to build kernel debug
-- symbols, since this requires some thinking about naming
-- conventions.  Here is the rule we need:
--
--                Rule ( [ Str "OBJDUMP=objdump",
--                         In SrcTree "src" "/tools/gen-gdbscript.sh",
--                         In SrcTree "src" "/tools/debug.gdb.in",
--                         In BuildTree arch "../sbin/cpu",
--                         Str ">", Out arch "/debug.gdb"
--                        ] )



let
  scheduler = case Config.scheduler of
      Config.RR   -> "schedule_rr.c"
      Config.RBED -> "schedule_rbed.c"
  common_c = [ "gdb_stub.c", 
               "capabilities.c", 
               "dispatch.c",
               scheduler, 
               "memset.c", 
               "memmove.c", 
               "paging_generic.c",
               "printf.c",
               "startup.c", 
               "stdlib.c", 
               "string.c", 
               "syscall.c",
               "wakeup.c", 
               "useraccess.c" ]
             ++ (if Config.microbenchmarks then ["microbenchmarks.c"] else [])
             ++ (if Config.oneshot_timer then ["timer.c"] else [])
  common_libs = [ "getopt", "mdb_kernel" ]
  
  link_cpudriver arg = linkKernel opts name objs libs
    where 
      opts = (kernelOptions $ head $ Args.architectures arg)
      suffix = if "cpu" == Args.target arg 
             then "" 
             else "_" ++ (Args.target arg)
      name = "cpu" ++ suffix
      objs = [ objectFilePath opts f 
             | f <- (Args.assemblyFiles arg) ++ (Args.cFiles arg) ++ common_c ] 
      libs = (Args.addLibraries arg) ++ common_libs
    
  cpudrivers arglist = 
    let 
      cafiles = Data.List.nub $ concat [ [ [ arch, cfile ] 
                                         | arch <- Args.architectures arg,
                                           cfile <- common_c ++ (Args.cFiles arg) ]
                                       | arg <- arglist ]
      safiles = Data.List.nub $ concat [ [ [ arch, sfile ]
                                         | arch <- Args.architectures arg,
                                           sfile <- Args.assemblyFiles arg ]
                                       | arg <- arglist ]
      mafiles = Data.List.nub $ concat [ [ [ arch, mfile ]
                                         | arch <- Args.architectures arg,
                                           mfile <- Args.mackerelDevices arg ]
                                       | arg <- arglist ]
    in
     ( [ compileCFile (kernelOptions a) f | [a,f] <- cafiles ]
       ++
       [ assembleSFile (kernelOptions a) f | [a,f] <- safiles ]
       ++
       [ mackerelDependencies (kernelOptions a) f [ c | [a,c] <- cafiles]  
       | [a,f] <- mafiles ]
       ++
       [ link_cpudriver arg | arg <- arglist ]
     )
         
  in cpudrivers [
  --
  -- Broadcom OMAP44xx-series dual-core Cortex-A9 SoC
  --
  cpuDriver {
     target = "omap44xx",
     architectures = [ "armv7" ],
     assemblyFiles = [ "arch/omap44xx/boot.S",
                       "arch/armv7/cp15.S",
                       "arch/armv7/exceptions.S" ],
     cFiles = [ "arch/arm/exec.c", 
                "arch/arm/misc.c", 
                "arch/arm/exn.c", 
                "arch/arm/phys_mmap.c",
                "arch/armv7/gic.c",
                "arch/armv7/kludges.c", 
                "arch/armv7/multiboot.c", 
                "arch/armv7/syscall.c",
                "arch/armv7/irq.c",
                "arch/omap44xx/init.c", 
                "arch/omap44xx/omap.c", 
                "arch/omap44xx/paging.c", 
                "arch/omap44xx/startup_arch.c", 
                "arch/omap44xx/omap_uart.c", 
                "arch/omap44xx/start_aps.c", 
                "arch/armv7/kputchar.c"],
     mackerelDevices = [ "arm", 
                         "arm_icp_pit", 
                         "pl130_gic", 
                         "sp804_pit", 
                         "cortex_a9_pit", 
                         "a9scu", 
                         "omap/omap_uart", 
                         "omap/omap44xx_id", 
                         "omap/omap44xx_emif",
                         "omap/omap44xx_gpio"],
     addLibraries = [ "elf", "cpio" ]
     }
  ]
