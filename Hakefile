--------------------------------------------------------------------------
-- Copyright (c) 2007-2013, ETH Zurich.
-- All rights reserved.
--
-- This file is distributed under the terms in the attached LICENSE file.
-- If you do not find this file, copies can be found by writing to:
-- ETH Zurich D-INFK, CAB F.78, Universitaetstr. 6, CH-8092 Zurich. 
-- Attn: Systems Group.
--
-- Hakefile for Barrelfish CPU drivers
-- 
--------------------------------------------------------------------------

--
-- Missing from this new Hakefile is the rule to build kernel debug
-- symbols, since this requires some thinking about naming
-- conventions.  Here is the rule we need:
--
--                Rule ( [ Str "OBJDUMP=objdump",
--                         In SrcTree "src" "/tools/gen-gdbscript.sh",
--                         In SrcTree "src" "/tools/debug.gdb.in",
--                         In BuildTree arch "../sbin/cpu",
--                         Str ">", Out arch "/debug.gdb"
--                        ] )



let
  common_c = [ "dispatch.c",
               "memset.c", 
               "memmove.c", 
               "printf.c",
               "startup.c",
               "stdlib.c", 
               "string.c" ]
  common_libs = [ ]
  
  link_cpudriver arg = linkKernel opts name objs libs
    where 
      opts = (kernelOptions $ head $ Args.architectures arg)
      suffix = if "cpu" == Args.target arg 
             then "" 
             else "_" ++ (Args.target arg)
      name = "cpu" ++ suffix
      objs = [ objectFilePath opts f 
             | f <- (Args.assemblyFiles arg) ++ (Args.cFiles arg) ++ common_c ] 
      libs = (Args.addLibraries arg) ++ common_libs
    
  cpudrivers arglist = 
    let 
      cafiles = Data.List.nub $ concat [ [ [ arch, cfile ] 
                                         | arch <- Args.architectures arg,
                                           cfile <- common_c ++ (Args.cFiles arg) ]
                                       | arg <- arglist ]
      safiles = Data.List.nub $ concat [ [ [ arch, sfile ]
                                         | arch <- Args.architectures arg,
                                           sfile <- Args.assemblyFiles arg ]
                                       | arg <- arglist ]
      mafiles = Data.List.nub $ concat [ [ [ arch, mfile ]
                                         | arch <- Args.architectures arg,
                                           mfile <- Args.mackerelDevices arg ]
                                       | arg <- arglist ]
    in
     ( [ compileCFile (kernelOptions a) f | [a,f] <- cafiles ]
       ++
       [ assembleSFile (kernelOptions a) f | [a,f] <- safiles ]
       ++
       [ mackerelDependencies (kernelOptions a) f [ c | [a,c] <- cafiles]  
       | [a,f] <- mafiles ]
       ++
       [ link_cpudriver arg | arg <- arglist ]
     )
         
  in cpudrivers [
  --
  -- Generic Intel/AMD amd64 64-bit x86 core
  --
  --
  -- Broadcom OMAP44xx-series dual-core Cortex-A9 SoC
  --
  cpuDriver {
     target = "omap44xx",
     architectures = [ "armv7" ],
     assemblyFiles = [ "arch/omap44xx/boot.S",
                       "arch/armv7/cp15.S",
                       "arch/armv7/exceptions.S" ],
     cFiles = [ "arch/arm/exn.c",
                "arch/arm/misc.c",
                "arch/armv7/kludges.c",
                "arch/armv7/kputchar.c",
                "arch/omap44xx/init.c",
                "arch/omap44xx/paging.c",
                "arch/omap44xx/multiboot.c",
                "arch/omap44xx/omap_gic.c",
                "arch/omap44xx/omap_led.c",
                "arch/omap44xx/omap_uart.c",
                "arch/omap44xx/startup_arch.c",
                "arch/omap44xx/startup_helpers.c" ],
      addLibraries = [ "elf" ]
     }
  ]
