/*
 * Copyright (c) 2009, ETH Zurich.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
 */

/* This interface describes the services provided 
 * by usb_manager. Primary responsibilities include
 * device enumeration, state saving, pipe managment.
 *
 * July, 2009. 
 */

interface usb_manager "USB manager" {
    typedef struct {
        uint8 dev;
        uint8 ep_number;
        uint8 ep_address;
        uint8 ep_dir;
        uint8 ep_type;
        uint16 ep_psz;
        uint8 multi;
        int valid;
    } pipe;
    typedef struct {
        uint8 bLength;
        uint8 bDescriptorType;
        uint16 wTotalLength;
        uint8 bNumInterfaces;
        uint8 bConfigurationValue;
        uint8 iConfiguration;
        uint8 bmAttributes;
        uint8 bMaxPower;
    } usb_config;

    typedef struct
    {
        uint8 bLength;
        uint8 bDescriptorType;
        uint8 bInterfaceNumber;
        uint8 bAlternateSetting;
        uint8 bNumEndpoints;
        uint8 bInterfaceClass;
        uint8 bInterfaceSubClass;
        uint8 bInterfaceProtocol;
        uint8 iInterface;
    } usb_intf;



    /* Interface for EHCI Host Controller */
    // A new deive is detected on port, resp = enumeration done
    call device_connect(int port);
    response notify_conn(int resp);

    // Device detached, resp = OK, all stuff cleaned 
    call device_disconnect(int port);
    response notify_disconn(int ret);

    /* Interface for USB client driver */
    // Is particular type of pipe available, resp = {YES, NO}, address 
    call pipe_req(uint8 dev, uint8 type, uint8 dir);
    response pipe_resp(uint8 resp, pipe p);

    /* Get current enabled configuration */
    call get_curr_config(uint8 dev);
    response get_curr_config_resp(int status, usb_config config);

    /* Get total number of configurations */
    call get_num_config(uint8 dev);
    response get_num_config_resp(uint8 num);

    /* Get configuration of index num */
    call get_config(uint8 dev, uint8 num);
    response get_config_resp(int status, usb_config config);

    /* Set configuration of index num */
    call set_config(uint8 dev, uint8 num);
    response set_config_resp(int status);


 /*-----------------------------------------*/

    /* Get current enabled interface */
    call get_curr_intf(uint8 dev);
    response get_curr_intf_resp(int status, usb_intf intf);

    /* Get total number of interfaces */
    call get_num_intf(uint8 dev);
    response get_num_intf_resp(uint8 num);

    /* Get interface of index num */
    call get_intf(uint8 dev, uint8 num);
    response get_intf_resp(int status, usb_intf intf);

    /* Set interface of index num */
    call set_intf(uint8 dev, uint8 num);
    response set_intf_resp(int status);


};
